####################################
# GENERATED BY SALTSTACK 
# YOUR LOCAL CHANGES WILL BE LOST
####################################

#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats
#
#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    balance                 source
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  tcpka
    option                  srvtcpka

    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 4000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
{% for listen in salt['pillar.get']('haproxy:listen', ['80']) %}
frontend http_in_{{ listen }}
    bind *:{{ listen }}
{% for name, vhost in salt['pillar.get']('haproxy:vhosts').iteritems() %}
    {% if vhost['listen'] == listen %}
    # begin vhost acl: {{ name }}
    acl host_{{ name }} hdr(host) -i {{ vhost['domain'] }}
    use_backend cluster_{{ name }} if host_{{ name }}
    # end vhost acl: {{ name }}
    {% endif %}
{% endfor -%}
{% endfor %}

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
{% for name, vhost in salt['pillar.get']('haproxy:vhosts').iteritems() -%}
backend cluster_{{ name }}
    balance {{ vhost.get('balance', 'roundrobin') }}
    {% if 'health_check' in vhost %}
    option httpchk {{ vhost['health_check'] }}
    {% endif %}
    {% for server in vhost['backends'] -%}
    server  {{ name }}_server_{{ loop.index }} {{ server }} {{ 'check' if 'health_check' in vhost }}

    {% endfor %}
{% endfor %}

#---------------------------------------------------------------------
# status monitor
#---------------------------------------------------------------------
listen haproxy_status *:11111
  mode http
  stats enable  
  stats realm Load\ Balancer\ Statistics
  stats uri  /haproxy?status
  stats auth admin:qunar2014
  stats refresh 5s
  #stats admin if TRUE  
  bind-process 1




